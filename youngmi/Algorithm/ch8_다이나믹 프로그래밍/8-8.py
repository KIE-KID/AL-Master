'''
8장 다이나믹 프로그래밍 실전문제5 - 효율적인 화폐 구성
난이도: 중, 풀이시간: 30분, 시간제한: 1초, 메모리제한: 128MB

문제설명
n가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다.
이 떄 각 화폐는 몇 개라도 사용할 수 있으며, 사용한 화폐의 구성은 같지만 순서만 다른 것은 같은 경우로 구분한다.


입력조건
첫째 줄에 N, M이 주어진다.(1<=X<=100, 1<=M<=10000)
이후 N개 줄에는 각 화폐의 가치가 주어진다.

출력조건
첫째 줄에 M원을 만들기 위한 최소한의 화폐 개수를 출력한다.
불가능할 때는 -1을 출력한다.

문제 풀이 아이디어
최대 입력조건에 맞는 배열을 생성(0으로 초기화한다.) 100개
식량창고 개수 n과 식량개수를 입력받는다(리스트)

index 0부터 +1씩 이동하면서
해당 인덱스까지의 식량창고에서 빼앗을 수 있는 최대 식량개수를 dp 테이블에 저장한다.
현재 인덱스가 i 라면 i + i-2의 값과 i-1을 비교해서 큰값을 저장하면된다.
보텀업방식
'''
n, m = map(int,input().split()) # 정수 N M 입력 받기
array=[] # n개의 화폐정보를 입력받는다.
for i in range(n):
    array.append(int(input()))

d = [10001] * (m+1) # 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = 0
for i in range(n):
    for j in range(array[i], m+1):
        d[j] = min(d[j],d[j-array[i]]+1)

# 계산된 결과 출력
if d[m] == 10001:
    print(-1)
else:
    print(d[m])
